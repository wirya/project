<?php
$editDatabase = new Form('editDatabase', array(
    'view' => 'Module:databases/control/settings/databases/edit-database',
    'viewData' => $data,
    'controller' => 'Module:databases/DatabasesForms',
    'function' => 'editDatabase',
    'submitButtonText' => 'Save Changes',
    'style' => 'width: 600px;',
));

$databasesSettings = Project::getModuleSettings('Databases');
$currentDatabase = $databasesSettings['databases'][$databaseIndex];

// Is the database for all instances?
$allInstances = $currentDatabase['instances'] == 'all' ? true : false;

// Build the instance options
$instances = array();
foreach(Project::getInstances() as $instance) {
    if(Arr::is($currentDatabase['instances'])) {
        $checked = Arr::contains($instance['id'], $currentDatabase['instances']) ? true : false;
    }
    else {
        $checked = false;
    }

    $instances[] = array('label' => $instance['id'].' ('.$instance['host'].$instance['accessPath'].')', 'value' => $instance['id'], 'checked' => $checked);
}

$editDatabaseSection = new FormSection('database', array(
    'title' => '<h2 style="display: inline;">'.$databasesSettings['databases'][$databaseIndex]['name'].'</h2> <p style="display: inline;"><a class="buttonLink minusSquareGrey" href="../../delete-databases/databaseIndex:'.$databaseIndex.'/">Delete</a><p>',
));
$editDatabaseSection->addFormComponentArray(array(
    new FormComponentDropDown('databaseType', 'Database type', array(
            array('label' => 'MySql', 'value' => 'MySql'),
        ), array(
            'validationOptions' => array('required'),
        )
    ),
    new FormComponentSingleLineText('databaseHost', 'Database host:', array(
        'validationOptions' => array('required'),
        'initialValue' => $databasesSettings['databases'][$databaseIndex]['host'],
    )),
    new FormComponentSingleLineText('databasePort', 'Database port:', array(
        'validationOptions' => array('required'),
        'initialValue' => $databasesSettings['databases'][$databaseIndex]['port'],
    )),
    new FormComponentSingleLineText('databaseName', 'Database name:', array(
        'validationOptions' => array('required'),
        'initialValue' => $databasesSettings['databases'][$databaseIndex]['name'],
    )),
    new FormComponentSingleLineText('databaseUsername', 'Database username:', array(
        'validationOptions' => array('required'),
        'initialValue' => $databasesSettings['databases'][$databaseIndex]['username'],
    )),
    new FormComponentSingleLineText('databasePassword', 'Database password:', array(
        'validationOptions' => array('required', 'password'),
        'type' => 'password',
        'initialValue' => $databasesSettings['databases'][$databaseIndex]['password'],
    )),
    new FormComponentSingleLineText('modelPath', 'Model path:', array(
        'initialValue' => $databasesSettings['databases'][$databaseIndex]['modelPath'],
    )),
    new FormComponentMultipleChoice('globalContext', '', array(
            array('value' => 'Yes', 'label' => 'This database is the global context for all models', 'checked' => $databasesSettings['databases'][$databaseIndex]['globalContext'])
        ),
        array(
            'tip' => '<p>The global context is the default database each model generated by the models module will use (if not explicitly set).</p>',
        )
    ),
    new FormComponentMultipleChoice('allInstances', '', array(
            array('value' => 'Yes', 'label' => 'This database is accessible by all instances', 'checked' => $allInstances)
        ),
        array(
        )
    ),
    new FormComponentMultipleChoice('instances', 'This database is only accessible by these instances:', $instances, array(
        'forceLabel' => true,
        'dependencyOptions' => array(
            'display' => 'hide',
            'dependentOn' => array('allInstances'),
            'jsFunction' => "!$('#allInstances-choice1').is(':checked');",
        ),
    )),
    new FormComponentHidden('databaseIndex', $databaseIndex),
));

$editDatabase->addFormSection($editDatabaseSection);
?>