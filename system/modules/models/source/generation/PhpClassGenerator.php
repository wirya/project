<?php

/**
 * Description of PhpClassGenerator
 *
 * @author Kam Sheffield
 * @version 09/08/2011
 */
class PhpClassGenerator {

    /**
     *
     * @var string
     */
    protected $modelName;

    /**
     *
     * @var Table
     */
    protected $table;

    /**
     *
     * @var string
     */
    protected $primaryKey;

    /**
     *
     * @var ModelDriver
     */
    protected $modelDriver;

    /**
     *
     * @param string $this->modelName
     * @param Table $table
     * @param ModelDriver $modelDriver
     */
    public function __construct($modelName, Table $table, ModelDriver $modelDriver) {
        $this->modelName = $modelName;
        $this->table = $table;
        $this->primaryKey = $table->pickPrimaryKey();
        $this->modelDriver = $modelDriver;
    }

    /**
     *
     * @return string
     */
    public function getClass() {
        // validate the data to make sure a valid model can be created before we attempt to
        $this->validate();

        $classCode = '<?php

/**
 * Model: '.$this->modelName.'
 * Table: '.$this->table->getName().'
 *
 * Generated by Project '.date("m/d/Y g:i a").'
 */
class '.$this->modelName.' extends Model {
    '.$this->generateClassConstants().'
    '.$this->generateModelMetaArray().'
    '.$this->generateStaticFunctions().'
    '.$this->generateConstructor().'
    '.$this->generateGettersAndSetters().'
    '.$this->generateRelatedTableFunctions().'
}

?>
';

        return $classCode;
    }

    protected function generateClassConstants() {
        // create the const for the model
        $code = '
    /**
     * The name of this class.
     */
     const Model = \''.$this->modelName.'\';

    /**
     * The name of the table this Model represents.
     */
     const Table = \''.$this->table->getName().'\';

    /**
     * The primary key of the table for this Model.
     */
     const PrimaryKey = \''.$this->primaryKey.'\';
     ';

        // create a const for each model field
        foreach($this->table->getColumnArray() as $tableColumn) {
            $code .= '
    /**
     * The \''.$tableColumn->getName().'\' column of the \''.$this->table->getName().'\' table.
     */
     const '.String::underscoresToCamelCase($tableColumn->getName(), true).' = \''.$this->table->getName().'.'.$tableColumn->getName().'\';
     ';
        }
        return $code;
    }

    protected function generateModelMetaArray() {
        $code = '/**
     * The meta data for this Model.
     *
     * @var array
     */
    private static $metaArray = array(
        \'foreignKeys\' => array(';

        foreach($this->table->getRelatedTableConstraintArray() as $relatedTableConstraint) {
            $code .= '
            \''.$relatedTableConstraint->getTableName().'.'.$relatedTableConstraint->getColumnName().'\' => array(
                \'type\' => \'inbound\',
                \'table\' => \''.$this->table->getName().'\',
                \'column\' => \''.$relatedTableConstraint->getReferencedColumnName().'\'
            ),';
        }

        if(count($this->table->getForeignKeyConstraintArray()) == 0) {
            $code = String::replaceLast('),', ')', $code);
        }

        foreach($this->table->getForeignKeyConstraintArray() as $foreignKeyConstraint) {
            // test for a self referential table
            if(String::contains($this->table->getName().'.'.$foreignKeyConstraint->getColumnName(), $code)) {
                // we need to make the type inbound so the model selector doesn't create the same query out of both keys
                $code .= '
            \''.$foreignKeyConstraint->getReferencedTableName().'.'.$foreignKeyConstraint->getReferencedColumnName().'\' => array(
                \'type\' => \'inbound\',
                \'table\' => \''.$this->table->getName().'\',
                \'column\' => \''.$foreignKeyConstraint->getColumnName().'\'
            ),';
            }
            else {
                // standard outbound case
                $code .= '
            \''.$this->table->getName().'.'.$foreignKeyConstraint->getColumnName().'\' => array(
                \'type\' => \'outbound\',
                \'table\' => \''.$foreignKeyConstraint->getReferencedTableName().'\',
                \'column\' => \''.$foreignKeyConstraint->getReferencedColumnName().'\'
            ),';
            }
        }

        if(count($this->table->getForeignKeyConstraintArray()) != 0) {
            $code = String::replaceLast('),', ')', $code);
        }

        $code .= '
        ),
        \'columns\' => array(';

        foreach($this->table->getColumnArray() as $tableColumn) {
            $code .= '
            \''.$tableColumn->getName().'\' => '.$this->modelDriver->parseDataTypeForPhpPdo($tableColumn->getDataType()).',';
        }

        $code = String::replaceLast(',', '', $code);

        $code .= '
        )
    );';

        return $code;
    }

    protected function generateStaticFunctions() {
        $code = '
    /**
     * Get the meta data for this Model.
     *
     * @param string $metaKey The initial key from the meta array you want to retreive
     * @return array
     */
    public static function getMetaArray($metaKey = \'\') {
        switch($metaKey) {
            case \'modelName\':
                return self::Model;
            case \'tableName\':
                return self::Table;
            case \'primaryKey\':
                return self::PrimaryKey;
            case \'foreignKeys\':
                return self::$metaArray[\'foreignKeys\'];
            case \'columns\':
                return self::$metaArray[\'columns\'];
            default:
                return self::$metaArray;
        }
    }

    /**
     * Cast an object to a '.$this->modelName.'.
     *
     * @return '.$this->modelName.'
     */
    public static function cast(Model $model) {
        return $model;
    }

    /**
     * Get a ModelSelector to select an instance of '.$this->modelName.' from the database.
     *
     * @return ModelSelector
     */
    public static function read() {
        $modelSelector = new ModelSelector('.$this->modelName.'::Table);
        return $modelSelector;
    }

    /**
     * Get a ModelUpdateSelector to update an instance of '.$this->modelName.' without reading it form the database.
     *
     * @return ModelUpdateSelector
     */
    public static function update() {
        $modelUpdateSelector = new ModelUpdateSelector('.$this->modelName.'::Table);
        return $modelUpdateSelector;
    }

    /**
     * Get a ModelDeleteSelector to delete an instance of '.$this->modelName.' without reading it form the database.
     *
     * @return ModelDeleteSelector
     */
    public static function remove() {
        $modelDeleteSelector = new ModelDeleteSelector('.$this->modelName.'::Table);
        return $modelDeleteSelector;
    }';

        return $code;
    }

    protected function generateConstructor() {
        $modelName = $this->modelName;

        $code = '
    /**
     * Default constructor for the '.$modelName.' model.
     */
    public function __construct() {
        if(func_num_args() == 2) {
            parent::__construct('.$modelName.'::Model, '.$modelName.'::Table, '.$modelName.'::PrimaryKey, func_get_arg(0), func_get_arg(1));
        }
        else if(func_num_args() == 1) {
            parent::__construct('.$modelName.'::Model, '.$modelName.'::Table, '.$modelName.'::PrimaryKey, func_get_arg(0), array());
        }
        else {
            parent::__construct('.$modelName.'::Model, '.$modelName.'::Table, '.$modelName.'::PrimaryKey, array(), array());
        }
    }';
        return $code;
    }

    protected function generateGettersAndSetters() {
        $code = '';
        foreach($this->table->getColumnArray() as $tableColumn)
        {
            $modelFieldName = String::underscoresToCamelCase($tableColumn->getName(), false);
            $code .= '
    /**
     * Get the current value of the \''.$modelFieldName.'\' field.
     *
     * @return '.$this->modelDriver->parseDataTypeForPhp($tableColumn->getDataType()).' The current value of the \''.$modelFieldName.'\' field
     */
    public function get'.String::underscoresToCamelCase($tableColumn->getName(), true).'() {
        return $this->get(\''.$tableColumn->getName().'\');
    }

    /**
     * Set the current value of the \''.$modelFieldName.'\' field.
     *
     * @param '.$this->modelDriver->parseDataTypeForPhp($tableColumn->getDataType()).' $value The value of \''.$modelFieldName.'\' to set.
     */
    public function set'.String::underscoresToCamelCase($tableColumn->getName(), true).'($value) {
        return $this->set(\''.$tableColumn->getName().'\', $value);
    }
    ';
        }
        return $code;
    }

    protected function generateRelatedTableFunctions() {
        $code = '';
        foreach($this->table->getForeignKeyConstraintArray() as $foreignKeyConstraint) {
            $code .= $this->generateRelatedTableFunctionsFor($this->table->getName(),
                    $this->modelName, $foreignKeyConstraint->getColumnName(),
                    String::underscoresToCamelCase($foreignKeyConstraint->getReferencedTableName(), true),
                    $foreignKeyConstraint->getReferencedTableName(), $foreignKeyConstraint->getReferencedColumnName(), false);
        }

        foreach($this->table->getRelatedTableConstraintArray() as $relatedTableConstraint) {
            $code .= $this->generateRelatedTableFunctionsFor($this->table->getName(),
                    $this->modelName, $relatedTableConstraint->getReferencedColumnName(),
                    String::underscoresToCamelCase($relatedTableConstraint->getTableName(), true),
                    $relatedTableConstraint->getTableName(), $relatedTableConstraint->getColumnName(), true);
        }
        return $code;
    }

    protected function generateRelatedTableFunctionsFor($tableName, $modelName, $myRelatedColumnName, $relatedModelName, $relatedTableName, $relatedColumnName, $isInbound) {
        // figure out what the name of the function should be
        $table = '';
        $columnName = '';
        if($isInbound) {
            $table = $tableName;
            $columnName = $relatedColumnName;
        }
        else {
            $table = $relatedTableName;
            $columnName = $myRelatedColumnName;
        }

        if($tableName == $relatedTableName) {
            // we are in a special recursive case
            if($isInbound) {
                // add the word 'child' to the function name
                if(!String::contains('child', String::lower($columnName))) {
                    if(String::contains('parent', String::lower($columnName))) {
                        $columnName = String::replace('parent', 'child', String::lower($columnName));
                    }
                    else {
                        $columnName = 'child_'.$columnName;
                    }
                }
                else {
                    $columnName = $columnName;
                }
            }
            else {
                // add the word 'parent' to the function name
                if(!String::contains('parent', String::lower($columnName))) {
                    if(String::contains('child', String::lower($columnName))) {
                        $columnName = String::replace('child', 'parent', String::lower($columnName));
                    }
                    else {
                        $columnName = 'parent_'.$columnName;
                    }
                }
                else {
                    $columnName = $columnName;
                }
            }
        }

        $functionName = '';
        if(String::endsWith('_'.$table.'_id', $columnName)) {
            $functionName = String::subString($columnName, 0, String::lastIndexOf('_'.$table.'_id', $columnName)).$relatedModelName;
        }
        else {
            $functionName = $relatedModelName;
        }

        $functionName = String::underscoresToCamelCase($functionName, true);

        $plural = 's';
        if(String::lower(String::lastCharacter($functionName)) == 's') {
            $plural = 'es';
        }

        $code = '
    /**
     * Read a ModelList of '.$relatedModelName.'s associated with this '.$modelName.'.
     *
     * @return ModelSelector A ModelSelector that returns a ModelList of '.$relatedModelName.' Models associated with this '.$modelName.'.
     */
    public function read'.$functionName.$plural.'() {
        $modelSelector = new ModelSelector('.$relatedTableName.');
        return $modelSelector->filterBy(\''.$relatedColumnName.'\', $this->fieldArray[\''.$myRelatedColumnName.'\']);
    }

    /**
     *
     * @return ModelList A ModelList of '.$relatedModelName.' Models.
     */
    public function get'.$functionName.$plural.'() {
        return $this->getRelatedModelList(\''.$relatedTableName.'.'.$relatedColumnName.'\');
    }
    ';

            if($isInbound) {
     $code .= '
    /**
     * Create a new instance of a '.$relatedModelName.' Model associated to this '.$modelName.'.
     *
     * @return '.$relatedModelName.' A new instance of the Model '.$relatedModelName.' associated to this '.$modelName.'
     */
    public function new'.$functionName.'() {
        $model = new '.$relatedModelName.'();
        $model->set(\''.$relatedColumnName.'\', $this->fieldArray[\''.$myRelatedColumnName.'\']);
        $this->addRelatedModel($model, \''.$relatedTableName.'.'.$relatedColumnName.'\');
        return $model;
    }
    ';
            }

        return $code;
    }

    protected function validate() {
        if($this->table == null) {
            throw new ModelException('No schema information found for the table you are trying to create a model for!');
        }

        if(String::isNullOrEmpty($this->modelName)) {
            throw new ModelException('No name found for model on table: '.$this->table->getName());
        }

        if(String::isNullOrEmpty($this->primaryKey)) {
            throw new ModelException('No primary key found for model: '.$this->modelName.' on table: '.$this->table->getName());
        }
    }
}

?>
