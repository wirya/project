<?php

/**
 * Test class for DatabaseDriver.
 * Generated by PHPUnit on 2011-01-04 at 11:05:05.
 */
class DatabaseDriverTest extends PHPUnit_Framework_TestCase {

    /**
     * @var DatabaseDriver
     */
    protected $object;

    protected $databaseName;
    protected $hostName;
    protected $port;
    protected $userName;
    protected $password;
    protected $connectionString;
    protected $databaseOptions;
    protected $supportsTransactions;

    protected function setUp() {
        $this->databaseName = 'atlasds';
        $this->hostName = 'localhost';
        $this->port = 3306;
        $this->userName = 'test';
        $this->password = 'password';
        $this->databaseOptions = array();
        $this->supportsTransactions = true;
        $this->object = new DatabaseDriverTestDriver($this->databaseName, $this->hostName, $this->port,
                $this->userName, $this->password, $this->databaseOptions, $this->supportsTransactions);
    }

    protected function tearDown() {
        if($this->object->isConnected()) {
            $this->object->closeConnection();
        }
    }

    // simple tests for getter type functions

    public function testGetHostName() {
        $this->assertEquals($this->object->getHostName(), $this->hostName);
    }

    public function testGetPort() {
        $this->assertEquals($this->object->getPort(), $this->port);
    }

    public function testGetDatabaseName() {
        $this->assertEquals($this->object->getDatabaseName(), $this->databaseName);
    }

    public function testSupportsTransactions() {
        $this->assertEquals($this->object->supportsTransactions(), $this->supportsTransactions);
    }

    public function testGetId() {
        $this->assertInternalType('string', $this->object->getId());
    }

    public function testGetDatabaseType() {
        $this->assertEquals('TestDatabaseDriver', $this->object->getDatabaseType());
    }

    // tests for database connectivity

    public function testIsConnected() {
        $this->assertInternalType('bool', $this->object->isConnected());
    }

    public function testOpenConnection() {
        $this->assertEquals($this->object->isConnected(), false);
        $this->object->openConnection();
        $this->assertEquals($this->object->isConnected(), true);

        // TODO: something to further verify connection to database
    }

    public function testCloseConnection() {
        $this->assertEquals($this->object->isConnected(), false);
        $this->object->openConnection();
        $this->assertEquals($this->object->isConnected(), true);
        $this->object->closeConnection();
        $this->assertEquals($this->object->isConnected(), false);
    }

    // tests for transactions

    public function testInTransaction() {
        $this->assertInternalType('bool', $this->object->inTransaction());
        $this->assertFalse($this->object->inTransaction());
    }

    public function testStartTransaction() {
        $this->assertEquals($this->object->inTransaction(), false);
        $this->object->startTransaction();
        $this->assertEquals($this->object->inTransaction(), true);
    }

    public function testCommitTransaction() {
        $this->assertEquals($this->object->inTransaction(), false);
        $this->object->startTransaction();
        $this->assertEquals($this->object->inTransaction(), true);
        $this->object->commitTransaction();
        $this->assertEquals($this->object->inTransaction(), false);
    }

    public function testRollbackTransaction() {
        $this->assertEquals($this->object->inTransaction(), false);
        $this->object->startTransaction();
        $this->assertEquals($this->object->inTransaction(), true);
        $this->object->rollbackTransaction();
        $this->assertEquals($this->object->inTransaction(), false);
    }

    // test attributes

    public function testGetAttribute() {
        $errMode = $this->object->getAttribute(PDO::ATTR_ERRMODE);
        if($errMode == PDO::ERRMODE_EXCEPTION || $errMode == PDO::ERRMODE_SILENT ||
                $errMode == PDO::ERRMODE_WARNING || $errMode == PDO::ERR_NONE) {
            $this->assertTrue(true);
        }
        else {
            $this->assertTrue(false);
        }
    }

    public function testSetAttribute() {
        $this->object->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $this->assertEquals($this->object->getAttribute(PDO::ATTR_ERRMODE), PDO::ERRMODE_EXCEPTION);
    }

    // test sql functions

    public function testGetLastInsertId() {
        $this->assertEquals($this->object->getLastInsertId(), 0);
    }

    public function testEscapeString() {
        $stringToEscape = 'Escape this string';
        $escapedString = $this->object->escapeString($stringToEscape);
        $this->assertEquals($escapedString{0} == "'", true);
        $this->assertEquals($escapedString{strlen($escapedString) - 1} == "'", true);
    }

    public function testPrepare() {
        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $this->assertInstanceOf('PDOStatement', $this->object->prepare($sql));
    }

    public function testQuery() {
        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = $this->object->query($sql);
        $count = $this->object->query('SELECT COUNT(*) FROM atlas_instance_ip_address');
        $count = $count[0]['COUNT(*)'];
        $this->assertEquals(count($result), $count);

        $sql = 'INSERT INTO atlas_instance_ip_address (ip_address, time_added) VALUES (123456, NOW())';
        $result = $this->object->query($sql);
        $this->assertEquals($result, 1);

        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = $this->object->query($sql);
        $this->assertEquals(count($result), $count + 1);

        $lastInsertId = $this->object->getLastInsertId();
        $sql = 'DELETE FROM atlas_instance_ip_address WHERE id = ' . $lastInsertId;
        $result = $this->object->query($sql);

        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = $this->object->query($sql);
        $this->assertEquals(count($result), $count);
    }

    public function testGetLastErrorInfo() {
        $errorInfo = $this->object->getLastErrorInfo();
        $this->assertEquals('0000', $errorInfo[0]);
    }

    public function testGetLastSqlState() {
        $this->assertEquals('0000', $this->object->getLastSqlState());
    }
}
?>
