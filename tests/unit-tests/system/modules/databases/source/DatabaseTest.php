<?php

/**
 * Test class for Database.
 * Generated by PHPUnit on 2011-01-04 at 14:20:57.
 */
class DatabaseTest extends PHPUnit_Framework_TestCase {

    /**
     * @var DatabaseDriver
     */
    protected $databaseDriver;

    protected function setUp() {
        $this->databaseDriver = new DatabaseDriverMySql('atlasds', 'localhost', 'test', 'password', 3306);
        Database::addDatabaseDriver($this->databaseDriver);
    }

    protected function tearDown() {
        Database::removeDatabaseDriver($this->databaseDriver->getId());
        $this->databaseDriver->closeConnection();
    }

    public function testGetAllDatabaseDrivers() {
        $this->assertInternalType('array', Database::getAllDatabaseDrivers());
        $this->assertEquals(1, count(Database::getAllDatabaseDrivers()));
    }

    public function testAddDatabaseDriver() {

        $exceptionCaught = false;
        try {
            Database::addDatabaseDriver($this->databaseDriver);
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        $this->assertEquals(1, count(Database::getAllDatabaseDrivers()));
    }

    public function testRemoveDatabaseDriver() {
        $this->assertEquals(1, count(Database::getAllDatabaseDrivers()));

        Database::removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(0, count(Database::getAllDatabaseDrivers()));

        $exceptionCaught = false;
        try {
            Database::removeDatabaseDriver($this->databaseDriver->getId());
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        Database::addDatabaseDriver($this->databaseDriver);
    }

    public function testGetDatabaseDriver() {
        $this->assertEquals(Database::getDatabaseDriver(), $this->databaseDriver);
        $this->assertEquals(Database::getDatabaseDriver($this->databaseDriver->getId()), $this->databaseDriver);

        Database::removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(0, count(Database::getAllDatabaseDrivers()));

        $exceptionCaught = false;
        try {
            Database::getDatabaseDriver();
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        $exceptionCaught = false;
        try {
            Database::getDatabaseDriver($this->databaseDriver->getId());
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        Database::addDatabaseDriver($this->databaseDriver);
    }

    public function testGetDefaultDatabaseDriverId() {
        $this->assertEquals($this->databaseDriver->getId(), Database::getDefaultDatabaseDriverId());
    }

    public function testSetDefaultDatabaseDriverId() {
        $exceptionCaught = false;
        try {
            Database::setDefaultDatabaseDriverId('bogusId');
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        $databaseDriver = new DatabaseDriverTestDriver('testdb', 'localhost', 3306, 'Halcoon', 'Enterprise');
        Database::addDatabaseDriver($databaseDriver);
        $this->assertEquals(2, count(Database::getAllDatabaseDrivers()));
        $this->assertEquals($this->databaseDriver->getId(), Database::getDefaultDatabaseDriverId());
        Database::setDefaultDatabaseDriverId($databaseDriver->getId());
        $this->assertEquals($databaseDriver->getId(), Database::getDefaultDatabaseDriverId());

        Database::removeDatabaseDriver($databaseDriver->getId());
        $this->assertEquals(null, Database::getDefaultDatabaseDriverId());
        $this->assertEquals(1, count(Database::getAllDatabaseDrivers()));

        Database::removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(null, Database::getDefaultDatabaseDriverId());
        $this->assertEquals(0, count(Database::getAllDatabaseDrivers()));

        Database::addDatabaseDriver($this->databaseDriver);
    }

    public function testGetDefaultDatabaseDriver() {
        $this->assertEquals($this->databaseDriver, Database::getDefaultDatabaseDriver());

        Database::removeDatabaseDriver($this->databaseDriver->getId());

        $exceptionCaught = false;
        try {
            Database::getDefaultDatabaseDriver();
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        $this->assertEquals(null, Database::getDefaultDatabaseDriverId());
        $this->assertEquals(0, count(Database::getAllDatabaseDrivers()));

        Database::addDatabaseDriver($this->databaseDriver);
    }

    public function testSetDefaultDatabaseDriver() {
        $this->assertEquals($this->databaseDriver, Database::getDefaultDatabaseDriver());
        $databaseDriver = new DatabaseDriverTestDriver('testdb', 'localhost', 3306, 'Halcoon', 'Enterprise');
        Database::setDefaultDatabaseDriver($databaseDriver);
        $this->assertEquals($databaseDriver, Database::getDefaultDatabaseDriver());

        $exceptionCaught = false;
        try {
            Database::setDefaultDatabaseDriver($databaseDriver);
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertFalse($exceptionCaught);

        Database::removeDatabaseDriver($databaseDriver->getId());
        $this->assertEquals(null, Database::getDefaultDatabaseDriverId());
        $this->assertEquals(1, count(Database::getAllDatabaseDrivers()));

        Database::removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(null, Database::getDefaultDatabaseDriverId());
        $this->assertEquals(0, count(Database::getAllDatabaseDrivers()));

        Database::addDatabaseDriver($this->databaseDriver);
    }

    public function testGetSetUsePersistentConnections() {
        $this->assertInternalType('bool', Database::getUsePersistentConnections());
        $this->assertTrue(Database::getUsePersistentConnections());
        Database::setUsePersistentConnections(false);
        $this->assertFalse(Database::getUsePersistentConnections());
        Database::setUsePersistentConnections(true);
    }

    public function testInTransaction() {
        $this->assertInternalType('bool', Database::inTransaction());
        $this->assertFalse(Database::inTransaction());

        $this->assertInternalType('bool', Database::inTransaction($this->databaseDriver->getId()));
        $this->assertFalse(Database::inTransaction($this->databaseDriver->getId()));
    }

    public function testTransactions() {
        $this->assertInternalType('bool', Database::inTransaction());
        $this->assertFalse(Database::inTransaction());
        Database::startTransaction();
        $this->assertTrue(Database::inTransaction());
        Database::rollbackTransaction();
        $this->assertFalse(Database::inTransaction());
        Database::startTransaction();
        $this->assertTrue(Database::inTransaction());
        Database::commitTransaction();
        $this->assertFalse(Database::inTransaction());

        $this->assertInternalType('bool', Database::inTransaction($this->databaseDriver->getId()));
        $this->assertFalse(Database::inTransaction($this->databaseDriver->getId()));
        Database::startTransaction($this->databaseDriver->getId());
        $this->assertTrue(Database::inTransaction($this->databaseDriver->getId()));
        Database::rollbackTransaction($this->databaseDriver->getId());
        $this->assertFalse(Database::inTransaction($this->databaseDriver->getId()));
        Database::startTransaction($this->databaseDriver->getId());
        $this->assertTrue(Database::inTransaction($this->databaseDriver->getId()));
        Database::commitTransaction($this->databaseDriver->getId());
        $this->assertFalse(Database::inTransaction($this->databaseDriver->getId()));
    }

    public function testEscapeString() {
        $stringToEscape = 'Escape this string';
        $escapedString = Database::escapeString($stringToEscape);
        $this->assertEquals($escapedString{0} == "'", true);
        $this->assertEquals($escapedString{strlen($escapedString) - 1} == "'", true);

        $escapedString = Database::escapeString($stringToEscape, $this->databaseDriver->getId());
        $this->assertEquals($escapedString{0} == "'", true);
        $this->assertEquals($escapedString{strlen($escapedString) - 1} == "'", true);
    }

    public function testGetLastInsertId() {
        $this->assertEquals(Database::getLastInsertId(), 0);
        $this->assertEquals(Database::getLastInsertId($this->databaseDriver->getId()), 0);
    }

    public function testGetAttribute() {
        $errMode = Database::getAttribute(PDO::ATTR_ERRMODE);
        if($errMode == PDO::ERRMODE_EXCEPTION || $errMode == PDO::ERRMODE_SILENT ||
                $errMode == PDO::ERRMODE_WARNING || $errMode == PDO::ERR_NONE) {
            $this->assertTrue(true);
        }
        else {
            $this->assertTrue(false);
        }

        $errMode = Database::getAttribute(PDO::ATTR_ERRMODE, $this->databaseDriver->getId());
        if($errMode == PDO::ERRMODE_EXCEPTION || $errMode == PDO::ERRMODE_SILENT ||
                $errMode == PDO::ERRMODE_WARNING || $errMode == PDO::ERR_NONE) {
            $this->assertTrue(true);
        }
        else {
            $this->assertTrue(false);
        }
    }

    public function testSetAttribute() {
        Database::setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $this->assertEquals(Database::getAttribute(PDO::ATTR_ERRMODE), PDO::ERRMODE_EXCEPTION);

        Database::setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION, $this->databaseDriver->getId());
        $this->assertEquals(Database::getAttribute(PDO::ATTR_ERRMODE, $this->databaseDriver->getId()), PDO::ERRMODE_EXCEPTION);
    }

    public function testGetLastErrorInfo() {
        $errorInfo = Database::getLastErrorInfo();
        $this->assertEquals('0000', $errorInfo[0]);

        $errorInfo = Database::getLastErrorInfo($this->databaseDriver->getId());
        $this->assertEquals('0000', $errorInfo[0]);
    }

    public function testGetLastSqlState() {
        $this->assertEquals('0000', Database::getLastSqlState());
        $this->assertEquals('0000', Database::getLastSqlState($this->databaseDriver->getId()));
    }

    public function testPrepare() {
        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $this->assertInstanceOf('PDOStatement', Database::prepare($sql));
        $this->assertInstanceOf('PDOStatement', Database::prepare($sql, $this->databaseDriver->getId()));
        $this->assertInstanceOf('PDOStatement', Database::prepare($sql, $this->databaseDriver->getId(), array()));
    }

    public function testQuery() {
        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = Database::query($sql);
        $count = Database::query('SELECT COUNT(*) FROM atlas_instance_ip_address');
        $count = $count[0]['COUNT(*)'];
        $this->assertEquals(count($result), $count);

        $sql = 'INSERT INTO atlas_instance_ip_address (ip_address, time_added) VALUES (123456, NOW())';
        $result = Database::query($sql);
        $this->assertEquals($result, 1);

        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = Database::query($sql);
        $this->assertEquals(count($result), $count + 1);

        $lastInsertId = Database::getLastInsertId();
        $sql = 'DELETE FROM atlas_instance_ip_address WHERE id = ' . $lastInsertId;
        $result = Database::query($sql);

        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = Database::query($sql);
        $this->assertEquals(count($result), $count);

        //------------------

        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = Database::query($sql, $this->databaseDriver->getId());
        $this->assertEquals(count($result), $count);

        $sql = 'INSERT INTO atlas_instance_ip_address (ip_address, time_added) VALUES (123456, NOW())';
        $result = Database::query($sql, $this->databaseDriver->getId());
        $this->assertEquals($result, 1);

        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = Database::query($sql, $this->databaseDriver->getId());
        $this->assertEquals(count($result), $count + 1);

        $lastInsertId = Database::getLastInsertId($this->databaseDriver->getId());
        $sql = 'DELETE FROM atlas_instance_ip_address WHERE id = ' . $lastInsertId;
        $result = Database::query($sql, $this->databaseDriver->getId());

        $sql = 'SELECT * FROM atlas_instance_ip_address';
        $result = Database::query($sql, $this->databaseDriver->getId());
        $this->assertEquals(count($result), $count);
    }
}
?>
