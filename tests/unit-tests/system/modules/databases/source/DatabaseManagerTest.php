<?php

/**
 * Test class for DatabaseManager.
 * Generated by PHPUnit on 2011-01-04 at 15:43:22.
 */
class DatabaseManagerTest extends PHPUnit_Framework_TestCase {

    /**
     *
     * @var DatabaseDriver
     */
    protected $databaseDriver;

    protected function setUp() {
        $this->databaseDriver = new DatabaseDriverTestDriver('atlasds', 'localhost', 3306, 'test', 'password', array(), true);
    }

    protected function tearDown() {

    }

    public function testGetInstance() {
        $this->assertInstanceOf('DatabaseManager', DatabaseManager::getInstance());
    }

    public function testGetAllDatabaseDrivers() {
        $this->assertInternalType('array', DatabaseManager::getInstance()->getAllDatabaseDrivers());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
    }

    public function testAddDatabaseDriver() {
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        $exceptionCaught = false;
        try {
            DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
    }

    public function testRemoveDatabaseDriver() {
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        $exceptionCaught = false;
        try {
            DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
    }

    public function testGetDatabaseDriver() {
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        $this->assertEquals(DatabaseManager::getInstance()->getDatabaseDriver(), $this->databaseDriver);
        $this->assertEquals(DatabaseManager::getInstance()->getDatabaseDriver($this->databaseDriver->getId()), $this->databaseDriver);

        DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        $exceptionCaught = false;
        try {
            DatabaseManager::getInstance()->getDatabaseDriver();
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        $exceptionCaught = false;
        try {
            DatabaseManager::getInstance()->getDatabaseDriver($this->databaseDriver->getId());
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);
    }

    public function testGetDefaultDatabaseDriverId() {
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        $this->assertEquals($this->databaseDriver->getId(), DatabaseManager::getInstance()->getDefaultDatabaseDriverId());

        DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
    }

    public function testSetDefaultDatabaseDriverId() {
        $exceptionCaught = false;
        try {
            DatabaseManager::getInstance()->setDefaultDatabaseDriverId('bogusId');
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        $databaseDriver = new DatabaseDriverTestDriver('testdb', 'localhost', 3306, 'Halcoon', 'Enterprise');
        DatabaseManager::getInstance()->addDatabaseDriver($databaseDriver);
        $this->assertEquals(2, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        $this->assertEquals($this->databaseDriver->getId(), DatabaseManager::getInstance()->getDefaultDatabaseDriverId());
        DatabaseManager::getInstance()->setDefaultDatabaseDriverId($databaseDriver->getId());
        $this->assertEquals($databaseDriver->getId(), DatabaseManager::getInstance()->getDefaultDatabaseDriverId());

        DatabaseManager::getInstance()->removeDatabaseDriver($databaseDriver->getId());
        $this->assertEquals(null, DatabaseManager::getInstance()->getDefaultDatabaseDriverId());
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(null, DatabaseManager::getInstance()->getDefaultDatabaseDriverId());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
    }

    public function testGetDefaultDatabaseDriver() {
        $exceptionCaught = false;
        try {
            DatabaseManager::getInstance()->getDefaultDatabaseDriver();
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertTrue($exceptionCaught);

        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        $this->assertEquals($this->databaseDriver, DatabaseManager::getInstance()->getDefaultDatabaseDriver());

        DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(null, DatabaseManager::getInstance()->getDefaultDatabaseDriverId());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
    }

    public function testSetDefaultDatabaseDriver() {
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
        DatabaseManager::getInstance()->addDatabaseDriver($this->databaseDriver);
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        $this->assertEquals($this->databaseDriver, DatabaseManager::getInstance()->getDefaultDatabaseDriver());
        $databaseDriver = new DatabaseDriverTestDriver('testdb', 'localhost', 3306, 'Halcoon', 'Enterprise');
        DatabaseManager::getInstance()->setDefaultDatabaseDriver($databaseDriver);
        $this->assertEquals($databaseDriver, DatabaseManager::getInstance()->getDefaultDatabaseDriver());

        $exceptionCaught = false;
        try {
            DatabaseManager::getInstance()->setDefaultDatabaseDriver($databaseDriver);
        }
        catch(Exception $e) {
            $exceptionCaught = true;
        }
        $this->assertFalse($exceptionCaught);

        DatabaseManager::getInstance()->removeDatabaseDriver($databaseDriver->getId());
        $this->assertEquals(null, DatabaseManager::getInstance()->getDefaultDatabaseDriverId());
        $this->assertEquals(1, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));

        DatabaseManager::getInstance()->removeDatabaseDriver($this->databaseDriver->getId());
        $this->assertEquals(null, DatabaseManager::getInstance()->getDefaultDatabaseDriverId());
        $this->assertEquals(0, count(DatabaseManager::getInstance()->getAllDatabaseDrivers()));
    }

    public function testGetSetUsePersistentConnections() {
        $this->assertInternalType('bool', DatabaseManager::getInstance()->getUsePersistentConnections());
        $this->assertTrue(DatabaseManager::getInstance()->getUsePersistentConnections());
        DatabaseManager::getInstance()->setUsePersistentConnections(false);
        $this->assertFalse(DatabaseManager::getInstance()->getUsePersistentConnections());
        DatabaseManager::getInstance()->setUsePersistentConnections(true);
    }
}
?>
